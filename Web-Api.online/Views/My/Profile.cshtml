@using Microsoft.AspNetCore.Identity
@using Web_Api.online.Models.ViewModels
@using Web_Api.online.Models.Enums

@model ProfileViewModel

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Profile";
}

<style>
    .card-body {
        padding: 15px !important;
    }

    .col-lg-5 {
        margin-top: 10px;
    }

    .col-lg-7 {
        margin-top: 10px;
    }
</style>

<div class="row">
    <div class="col-xl-4 col-lg-5">
        <div class="card text-center">
            <div class="card-body">
                @if (string.IsNullOrEmpty(Model.UserInfo.ProfilePhotoPath))
                {
                    <img src="~/img/users/standart_profile.png" class="rounded-circle avatar-lg img-thumbnail" alt="profile-image">
                }
                else
                {
                    <img src="@Model.UserInfo.ProfilePhotoPath" class="rounded-circle avatar-lg img-thumbnail" alt="profile-image">
                }

                <h4 class="mb-0 mt-2">@Model.Username</h4>

                <div class="text-start mt-3">
                    <p class="text-muted mb-2 font-13">
                        <strong>Refferal link :</strong>
                        <span class="ms-2">
                            https://ecats.online/Identity/Account/Register?refid=@Model.UserNumber
                        </span>
                    </p>
                    
                    <p class="text-muted mb-2 font-13">
                        <strong>Full Name :</strong>
                        <span class="ms-2">
                            @(string.IsNullOrEmpty(Model.UserInfo.FullName) ? "Undefined" : Model.UserInfo.FullName)
                        </span>
                    </p>

                    @if (!string.IsNullOrEmpty(Model.PhoneNumber))
                    {
                        <p class="text-muted mb-1 font-13">
                            <strong>Mobile :</strong>
                            <span class="ms-2">@Model.PhoneNumber</span>
                        </p>
                    }
                    <p class="text-muted mb-1 font-13">
                        <strong>Email :</strong>
                        <span class="ms-2">@Model.Email</span>
                    </p>

                    <p class="text-muted mb-1 font-13">
                        <strong>Location :</strong>
                        <span class="ms-2">@(string.IsNullOrEmpty(Model.UserInfo.Location) ? "Not selected" : Model.UserInfo.Location)</span>
                    </p>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <div class="col-12">
                    <div class="row">
                        <div class="col-sm-12 col-md-6 col-xs-12">
                            <div class="donut-container text-left"></div>
                        </div>
                        <div class="col-sm-12 col-md-6 col-xs-12">
                            <div class="legend-chart-container text-left"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <div class="col-12">
                    <div class="row">
                        <h5 class="text-uppercase">
                            <i class="mdi mdi-briefcase me-1"></i>
                            <a href="/My/Incomes">Incomes</a>
                        </h5>
                        <h5 class="text-uppercase">
                            <i class="mdi mdi-briefcase me-1"></i>
                            <a href="/My/Events">Events</a>
                        </h5>
                        <h5 class="text-uppercase">
                            <i class="mdi mdi-briefcase me-1"></i>
                            <a href="/My/MyRefferals">Refferals</a>
                        </h5>
                        @if (Model.LastFiveEvents != null)
                        {
                            <div class="timeline-alt pb-0">
                                @foreach (var eventModel in Model.LastFiveEvents)
                                {
                                    <div class="timeline-item">
                                        <i class="mdi mdi-circle bg-info-lighten text-info timeline-icon"></i>
                                        <div class="timeline-item-info">
                                            <h5 class="mt-0 mb-1">@((EventTypeEnum) eventModel.Type)</h5>
                                            <p class="font-14">DateTime: @(eventModel.WhenDate.ToString("g"))</p>
                                            @if  (@eventModel.Value != null)
                                            {
                                                <p class="text-muted mt-2 mb-0 pb-3">
                                                    Amount: <span class="decimal-data">@eventModel.Value</span>
                                                    @(eventModel.Comment)
                                                </p>
                                            }
                                            else
                                            {
                                                <p class="text-muted mt-2 mb-0 pb-3">
                                                    @(eventModel.Comment)
                                                </p>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-8 col-lg-7">
        <div class="card">
            <div class="card-body">

                <form asp-controller="My" asp-action="UpdateProfileData" method="post">
                    <h5 class="mb-4 text-uppercase"><i class="mdi mdi-account-circle me-1"></i> Personal Info</h5>

                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <input asp-for="Username" type="text" class="form-control" id="username-" placeholder="Enter Username">
                            </div>
                        </div>
                    </div> <!-- end row -->

                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label for="fullname" class="form-label">FullName</label>
                                <input asp-for="UserInfo.FullName" type="text" class="form-control" id="fullname-" placeholder="Enter Full Name">
                            </div>
                        </div>
                    </div> <!-- end row -->

                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label for="userbio" class="form-label">Bio</label>
                                <textarea asp-for="UserInfo.AboutMe" class="form-control" id="userbio" rows="4" placeholder="Write something..."></textarea>
                            </div>
                        </div> <!-- end col -->
                    </div> <!-- end row -->

                    <h5 class="mb-3 text-uppercase bg-light p-2"><i class="mdi mdi-earth me-1"></i> Social</h5>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="social-fb" class="form-label">Facebook</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="mdi mdi-facebook"></i>
                                    </span>
                                    <input asp-for="UserInfo.FacebookLink" type="text" class="form-control" id="social-fb" placeholder="Url">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="social-tw" class="form-label">Twitter</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="mdi mdi-twitter"></i>
                                    </span>
                                    <input asp-for="UserInfo.TwitterLink" type="text" class="form-control" id="social-tw" placeholder="Username">
                                </div>
                            </div>
                        </div> <!-- end col -->
                    </div> <!-- end row -->

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="social-insta" class="form-label">Instagram</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="mdi mdi-instagram"></i>
                                    </span>
                                    <input asp-for="UserInfo.InstagramLink" type="text" class="form-control" id="social-insta" placeholder="Url">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="social-lin" class="form-label">Linkedin</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="mdi mdi-linkedin"></i>
                                    </span>
                                    <input asp-for="UserInfo.LinkedinLink" type="text" class="form-control" id="social-lin" placeholder="Url">
                                </div>
                            </div>
                        </div> <!-- end col -->
                    </div> <!-- end row -->

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="social-sky" class="form-label">Skype</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="mdi mdi-skype"></i>
                                    </span>
                                    <input asp-for="UserInfo.SkypeLink" type="text" class="form-control" id="social-sky" placeholder="username">
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="social-gh" class="form-label">Github</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="mdi mdi-github"></i>
                                    </span>
                                    <input asp-for="UserInfo.GithubLink" type="text" class="form-control" id="social-gh" placeholder="Username">
                                </div>
                            </div>
                        </div> <!-- end col -->
                    </div> <!-- end row -->

                    <div class="text-end">
                        <button type="submit" class="btn btn-success mt-2"><i class="mdi mdi-content-save"></i> Save</button>
                    </div>
                </form>
            </div> <!-- end card body -->
            <div>
            </div>
        </div> <!-- end card -->
    </div>
</div>

@section scripts {
<script src="~/js/vendor/britecharts.min.js"></script>
<script src="~/js/vendor/d3.min.js"></script>
<script>
    var briteChartApp = window.briteChartApp || {};

    (function($, context) {

        const makeRandomColor = function() {
            var c = '';
            while (c.length < 6) {
                c += (Math.random()).toString(16).substr(-6).substr(-1)
            }
            return '#' + c;
        }

        var model = @Html.Raw(Json.Serialize(Model));

        var colors = []

        model.notEmptyWallets.forEach(item => {
            colors.push(makeRandomColor());
        })

        context.createDonutChart = function(elementSelector, data) {
            var stepContainer = d3.select(elementSelector),
              containerWidth = stepContainer.node()
                ? stepContainer.node().parentNode.parentNode.getBoundingClientRect().width
                : false

            var donutChart = britecharts.donut(),
                legendChart = britecharts.legend(),
                legendContainer = void 0;

            let legendHeight = 0;

            if(model.notEmptyWallets > 3){
                legendHeight = 250;
            }
            else{
                legendHeight = 150;
            }

            legendChart
                .width(170)
                .height(legendHeight)
                .colorSchema(colors)
                .numberFormat("s");

            let radius = 0;

            if(containerWidth < 400){
                radius = containerWidth / 4;
            }
            else{
                radius = containerWidth / 5;
            }

            donutChart
                .width(containerWidth / 2)
                .height(containerWidth / 2)
                .highlightSliceById(2)
                .colorSchema(colors)
                .hasFixedHighlightedSlice(true)
                .externalRadius(radius)
                .internalRadius(radius / 2)
                .on('customMouseOver', function(data) {
                    legendChart.highlight(data.data.id);
                })
                .on('customMouseOut', function() {
                    legendChart.clearHighlight();
                });

            //donutChart
            //    .width(containerWidth / 2)
            //    .height(containerWidth / 2)
            //    .highlightSliceById(11)
            //    .colorSchema(colors)
            //    .hasFixedHighlightedSlice(true)
            //    .externalRadius(containerWidth / 5)
            //    .internalRadius(containerWidth / 10)
            //    .on('customMouseOver', function(data) {
            //        legendChart.highlight(data.data.id);
            //    })
            //    .on('customMouseOut', function() {
            //        legendChart.clearHighlight();
            //    });

            d3.select(elementSelector)
                .datum(data)
                .call(donutChart);
            legendContainer = d3.select(".legend-chart-container");
            legendContainer.datum(data).call(legendChart);
        };

        var donutData = [];

        if (model.notEmptyWallets == null || model.notEmptyWallets.length == 0) {
            donutData.push({
                name: "Empty wallet",
                id: 0,
                quantity: 0,
                percentage: 0
            });
            //colors.push("#313a46");;
        } else {
            var sumValues = model.notEmptyWallets.map(a => a.value).reduce(function(a, b) {
                return a + b;
            }, 0);


            var mainWallets = []

            if (model.notEmptyWallets.length > 5) {
                mainWallets = model.notEmptyWallets.sort((a, b) => b.value - a.value).slice(0, 4);

                var otherWalletsValues = model.notEmptyWallets.sort((a, b) => b.value - a.value).slice(4, model.notEmptyWallets.length).reduce(function(a, b) {
                    return a + b;
                }, 0);

                mainWallets.push({
                    userId: "",
                    currencyAcronim: "Other",
                    value: otherWalletsValues
                });
            }

            var index = 0;

            model.notEmptyWallets.forEach(wallet => {
                let percent = wallet.value / sumValues * 100;

                if (percent < 1) {
                    percent = Math.ceil(percent);
                } else {
                    percent = Math.floor(percent);
                }

                donutData.push({
                    name: wallet.currencyAcronim,
                    id: index,
                    quantity: wallet.value,
                    percentage: percent
                });

                index++;
            });
        }

        $(window).on('resize', function (e) {
          e.preventDefault();
          setTimeout(drawCharts, 200);
        });

        const drawCharts = function(){
            d3.selectAll('.donut-chart').remove();
            d3.selectAll('.britechart-legend').remove();

            if ($(".donut-container").length > 0) {
                briteChartApp.createDonutChart(".donut-container", donutData);
            }
        }

        drawCharts();

    })(jQuery, briteChartApp);
</script>

}